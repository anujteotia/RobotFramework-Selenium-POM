<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.1 (Python 3.8.5 on darwin)" generated="20210823 14:18:40.414" rpa="false" schemaversion="2">
<suite id="s1" name="Login User Test Api" source="/Users/anujteotia/Desktop/assignment-rf-selenium-pom/assignment-rf-selenium-pom/Tests/login_user_test_api.robot">
<test id="s1-t1" name="Authenticate Existing User">
<kw name="Authenticate A User" library="login_user_keywords">
<arg>${login_emailId}</arg>
<arg>${login_pwd}</arg>
<arg>${auth_user}</arg>
<arg>${auth_pwd}</arg>
<doc>This keyword will authenticate the user using Basic Auth</doc>
<kw name="User Auth" library="Users">
<var>${auth_user_data}</var>
<arg>${email}</arg>
<arg>${password}</arg>
<arg>${auth_user}</arg>
<arg>${auth_pwd}</arg>
<doc>The function will authenticate the user using Basic Auth
:param email: Email id of the user
:param password: password of the user
:param auth_user: username for Basic Auth
:param auth_pwd: Password for Basic Auth
:return: returns a dictionary containing the jwt token</doc>
<msg timestamp="20210823 14:18:41.421" level="INFO">${auth_user_data} = {'user': {'username': 'newuser11', 'email': 'newuser11@gmail.com', 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMjI5MzczZjcyZWQwMjcwNmFkM2E1YiIsInVzZXJuYW1lIjoibmV3dXNlcjExIiwiZXhwIjoxNj...</msg>
<status status="PASS" starttime="20210823 14:18:41.122" endtime="20210823 14:18:41.421"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${auth_user_data}</arg>
<arg>${auth_user_data}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20210823 14:18:41.422" level="INFO">${auth_user_data} = {'user': {'username': 'newuser11', 'email': 'newuser11@gmail.com', 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMjI5MzczZjcyZWQwMjcwNmFkM2E1YiIsInVzZXJuYW1lIjoibmV3dXNlcjExIiwiZXhwIjoxNj...</msg>
<status status="PASS" starttime="20210823 14:18:41.421" endtime="20210823 14:18:41.422"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${auth_user_data}</arg>
<arg>msg=Unable to authenticate user</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20210823 14:18:41.423" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20210823 14:18:41.422" endtime="20210823 14:18:41.423"/>
</kw>
<status status="PASS" starttime="20210823 14:18:41.121" endtime="20210823 14:18:41.423"/>
</kw>
<kw name="Validate Authenticated User" library="login_user_keywords">
<doc>This keyword validates that authenticated user returns the correct data</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>dictionary=${auth_user_data['user']}</arg>
<arg>key=email</arg>
<arg>msg=email is not present</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20210823 14:18:41.424" endtime="20210823 14:18:41.426"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>dictionary=${auth_user_data['user']}</arg>
<arg>key=username</arg>
<arg>msg=username is not present</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20210823 14:18:41.426" endtime="20210823 14:18:41.428"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>dictionary=${auth_user_data['user']}</arg>
<arg>key=token</arg>
<arg>msg=jwt token is not present</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20210823 14:18:41.428" endtime="20210823 14:18:41.430"/>
</kw>
<status status="PASS" starttime="20210823 14:18:41.423" endtime="20210823 14:18:41.430"/>
</kw>
<doc>This test case will authenticate the user</doc>
<tag>API_TEST</tag>
<status status="PASS" starttime="20210823 14:18:41.120" endtime="20210823 14:18:41.430"/>
</test>
<test id="s1-t2" name="Register New User">
<kw name="New User Registration" library="login_user_keywords">
<arg>${login_pwd}</arg>
<arg>${auth_user}</arg>
<arg>${auth_pwd}</arg>
<doc>This keyword registers a new user</doc>
<kw name="Generate Random String" library="String">
<var>${login_username}</var>
<arg>12</arg>
<arg>[LOWER]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20210823 14:18:41.433" level="INFO">${login_username} = xywhwjlsrokk</msg>
<status status="PASS" starttime="20210823 14:18:41.432" endtime="20210823 14:18:41.433"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${login_emailId}</var>
<arg>SEPARATOR=</arg>
<arg>${login_username}</arg>
<arg>@gmail.com</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20210823 14:18:41.433" level="INFO">${login_emailId} = xywhwjlsrokk@gmail.com</msg>
<status status="PASS" starttime="20210823 14:18:41.433" endtime="20210823 14:18:41.433"/>
</kw>
<kw name="User Registration" library="Users">
<var>${registered_user}</var>
<arg>${login_username}</arg>
<arg>${login_emailId}</arg>
<arg>${login_pwd}</arg>
<arg>${auth_user}</arg>
<arg>${auth_pwd}</arg>
<doc>This functions registers a new user
:param username: Username to be registered
:param email: email to be registered
:param password: pass for the new registration
:param auth_user: username for Basic Auth
:param auth_pwd: Password for Basic Auth
:return: returns a dictionary containing the data about registered user.</doc>
<msg timestamp="20210823 14:18:41.614" level="INFO">${registered_user} = {'user': {'username': 'xywhwjlsrokk', 'email': 'xywhwjlsrokk@gmail.com', 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMjM5MjIxZjcyZWQwMjcwNmFkM2E4OSIsInVzZXJuYW1lIjoieHl3aHdqbHNyb2trIiwi...</msg>
<status status="PASS" starttime="20210823 14:18:41.433" endtime="20210823 14:18:41.614"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${registered_user}</arg>
<arg>${registered_user}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210823 14:18:41.615" level="INFO">${registered_user} = {'user': {'username': 'xywhwjlsrokk', 'email': 'xywhwjlsrokk@gmail.com', 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMjM5MjIxZjcyZWQwMjcwNmFkM2E4OSIsInVzZXJuYW1lIjoieHl3aHdqbHNyb2trIiwi...</msg>
<status status="PASS" starttime="20210823 14:18:41.614" endtime="20210823 14:18:41.615"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${registered_user}</arg>
<arg>msg=Unable to register the user</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20210823 14:18:41.616" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20210823 14:18:41.615" endtime="20210823 14:18:41.616"/>
</kw>
<status status="PASS" starttime="20210823 14:18:41.432" endtime="20210823 14:18:41.616"/>
</kw>
<kw name="Validate Registered User" library="login_user_keywords">
<doc>This keyword will validates that user is registered successfully</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>dictionary=${registered_user['user']}</arg>
<arg>key=email</arg>
<arg>msg=email is not present</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20210823 14:18:41.617" endtime="20210823 14:18:41.619"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>dictionary=${registered_user['user']}</arg>
<arg>key=username</arg>
<arg>msg=username is not present</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20210823 14:18:41.619" endtime="20210823 14:18:41.621"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>dictionary=${registered_user['user']}</arg>
<arg>key=token</arg>
<arg>msg=jwt token is not present</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20210823 14:18:41.621" endtime="20210823 14:18:41.624"/>
</kw>
<status status="PASS" starttime="20210823 14:18:41.616" endtime="20210823 14:18:41.624"/>
</kw>
<doc>This test case will register and validate a new user</doc>
<tag>API_TEST</tag>
<status status="PASS" starttime="20210823 14:18:41.431" endtime="20210823 14:18:41.624"/>
</test>
<test id="s1-t3" name="Get Current Signed In User">
<kw name="Get Current Active User" library="login_user_keywords">
<arg>${login_emailId}</arg>
<arg>${login_pwd}</arg>
<arg>${auth_user}</arg>
<arg>${auth_pwd}</arg>
<doc>This keyword will return current user</doc>
<kw name="Get Current User" library="Users">
<var>${current_user}</var>
<arg>${email}</arg>
<arg>${password}</arg>
<arg>${auth_user}</arg>
<arg>${auth_pwd}</arg>
<doc>This function returns the details of authenticated current user
:param email: email id for login
:param password: login password
:param auth_user: username for Basic Auth
:param auth_pwd: Password for Basic Auth
:return: returns the details of the current user</doc>
<msg timestamp="20210823 14:18:42.100" level="INFO">${current_user} = {'user': {'username': 'newuser11', 'email': 'newuser11@gmail.com', 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMjI5MzczZjcyZWQwMjcwNmFkM2E1YiIsInVzZXJuYW1lIjoibmV3dXNlcjExIiwiZXhwIjoxNj...</msg>
<status status="PASS" starttime="20210823 14:18:41.627" endtime="20210823 14:18:42.101"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${current_user}</arg>
<arg>${current_user}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20210823 14:18:42.102" level="INFO">${current_user} = {'user': {'username': 'newuser11', 'email': 'newuser11@gmail.com', 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMjI5MzczZjcyZWQwMjcwNmFkM2E1YiIsInVzZXJuYW1lIjoibmV3dXNlcjExIiwiZXhwIjoxNj...</msg>
<status status="PASS" starttime="20210823 14:18:42.101" endtime="20210823 14:18:42.102"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${current_user}</arg>
<arg>msg=Unable to fetch current User</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20210823 14:18:42.102" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20210823 14:18:42.102" endtime="20210823 14:18:42.103"/>
</kw>
<status status="PASS" starttime="20210823 14:18:41.626" endtime="20210823 14:18:42.103"/>
</kw>
<kw name="Validate Current User" library="login_user_keywords">
<doc>This keyword will validates that user details are fetched correctly</doc>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>dictionary=${current_user['user']}</arg>
<arg>key=email</arg>
<arg>msg=email is not present</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20210823 14:18:42.104" endtime="20210823 14:18:42.106"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>dictionary=${current_user['user']}</arg>
<arg>key=username</arg>
<arg>msg=username is not present</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20210823 14:18:42.106" endtime="20210823 14:18:42.108"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>dictionary=${current_user['user']}</arg>
<arg>key=token</arg>
<arg>msg=jwt token is not present</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20210823 14:18:42.108" endtime="20210823 14:18:42.110"/>
</kw>
<status status="PASS" starttime="20210823 14:18:42.103" endtime="20210823 14:18:42.110"/>
</kw>
<doc>This keyword will return the current user</doc>
<tag>API_TEST</tag>
<status status="PASS" starttime="20210823 14:18:41.625" endtime="20210823 14:18:42.111"/>
</test>
<test id="s1-t4" name="Update The Deatils Of Existing User">
<kw name="Update Existing User" library="login_user_keywords">
<arg>${login_emailId}</arg>
<arg>${login_pwd}</arg>
<arg>${bio}</arg>
<arg>${image}</arg>
<arg>${auth_user}</arg>
<arg>${auth_pwd}</arg>
<doc>This keyword updates the existing user details</doc>
<kw name="Update User" library="Users">
<var>${updated_user}</var>
<arg>${email}</arg>
<arg>${password}</arg>
<arg>${bio}</arg>
<arg>${image}</arg>
<arg>${auth_user}</arg>
<arg>${auth_pwd}</arg>
<doc>This function will update the details of the current user
:param email: login email id
:param password: login password
:param bio: bio to be updated
:param image: image to be updated
:param auth_user: username for Basic Auth
:param auth_pwd: Password for Basic Auth
:return: returns a dictionary</doc>
<msg timestamp="20210823 14:18:42.457" level="INFO">{"user": {"email": "newuser11@gmail.com", "bio": "Updating User Bio", "image": "image_url.png", "username": "newuser11"}}
{'jwtauthorization': 'Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMjI5MzczZjcyZWQwMjcwNmFkM2E1YiIsInVzZXJuYW1lIjoibmV3dXNlcjExIiwiZXhwIjoxNjM0OTA1MTIyLCJpYXQiOjE2Mjk3MjExMjJ9.71G78zhP6agCHGA-LFL_JN5XP9dM-4BB8ihBO9y2oh4'}
{"errors":{"message":"Cannot read property 'username' of undefined","error":{}}}</msg>
<msg timestamp="20210823 14:18:42.467" level="FAIL">HTTPError: 500 Server Error: Internal Server Error for url: https://qa-task.backbasecloud.com/api/user</msg>
<status status="FAIL" starttime="20210823 14:18:42.113" endtime="20210823 14:18:42.467"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${updated_user}</arg>
<arg>msg=Unable to Update the User successfully</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" starttime="20210823 14:18:42.468" endtime="20210823 14:18:42.468"/>
</kw>
<status status="FAIL" starttime="20210823 14:18:42.112" endtime="20210823 14:18:42.469"/>
</kw>
<doc>This keyword will update the existing User</doc>
<tag>API_TEST</tag>
<status status="FAIL" starttime="20210823 14:18:42.111" endtime="20210823 14:18:42.470">HTTPError: 500 Server Error: Internal Server Error for url: https://qa-task.backbasecloud.com/api/user</status>
</test>
<status status="FAIL" starttime="20210823 14:18:40.419" endtime="20210823 14:18:42.472"/>
</suite>
<statistics>
<total>
<stat pass="3" fail="1" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="3" fail="1" skip="0">API_TEST</stat>
</tag>
<suite>
<stat pass="3" fail="1" skip="0" id="s1" name="Login User Test Api">Login User Test Api</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20210823 14:18:41.039" level="ERROR">Error in file '/Users/anujteotia/Desktop/assignment-rf-selenium-pom/assignment-rf-selenium-pom/Resources/common_keywords.robot' on line 2: Importing library 'Browser' failed: ModuleNotFoundError: No module named 'backports'
Traceback (most recent call last):
  File "/Users/anujteotia/opt/anaconda3/lib/python3.8/site-packages/Browser/__init__.py", line 16, in &lt;module&gt;
    from .browser import Browser
  File "/Users/anujteotia/opt/anaconda3/lib/python3.8/site-packages/Browser/browser.py", line 51, in &lt;module&gt;
    from .playwright import Playwright
  File "/Users/anujteotia/opt/anaconda3/lib/python3.8/site-packages/Browser/playwright.py", line 24, in &lt;module&gt;
    from backports.cached_property import cached_property
PYTHONPATH:
  /Users/anujteotia/opt/anaconda3/bin
  /Users/anujteotia/opt/anaconda3/lib/python38.zip
  /Users/anujteotia/opt/anaconda3/lib/python3.8
  /Users/anujteotia/opt/anaconda3/lib/python3.8/lib-dynload
  /Users/anujteotia/opt/anaconda3/lib/python3.8/site-packages</msg>
</errors>
</robot>
